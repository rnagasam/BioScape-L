BioScape^L

An interpreter for a pi-calculus with spatial locations[1].  This
implementation does not statically type check programs, works only
with 2D space, and doesn't perform well when the number of processes
(also called entities) is large.


Syntax

    <num> ::= [0-9][0-9]*
    <id> ::= [A-Za-z][0-9a-zA-Z_]*
    <msg> ::= \'[0-9a-zA-Z_]*\'

    <location> ::= @ <num> , <num>
                 | @this

    <exp> ::= <num>
            | <id>
	    | <msg>
            | null
            | move . <exp>
	    | send <id> ( <exp> ) . <exp>
	    | recv <id> ( <exp> ) . <exp>
	    | spawn <ents> . <exp>
	    | <choice>

    <exps> ::= <exp> <exps>
             | <exp>

    <choice> ::= { <exp> } , <choice>
               | { <exp> }

    <ent> ::= <name> . { <location> , <num> }
            | <name> . { <location> }

    <ents> ::= <ent> , <ents>
             | <ent>

    <definition> ::= define <ent> ( <exps> ) ;

    <definitions> ::= <definition> <definitions>
                    | <definition>

    <chan> ::= new <id> <num> ;

    <chans> ::= <chan> ; <chans>
              | <chan> ;

    <comm> ::= -run <id> <num> ;
             | -step <num> ;

    <comms> ::= <comm> <comms>
              | <comm>

    <program> ::= <chans> <definitions> <comms>


Example program

The program shown below defines a channel `a' with a reaction radius
of 25, a process/entity `A' at the origin with radius 1 and a
process/entity `B' at the origin with radius 2.  Note that the initial
location is only approximate -- the entities are spawned somewhere
"near" the origin and do not overlap.

`A' sends the message 'ack' on channel `a' and `B' receives a message
on channel `a' and binds it the variable `x'.  The step command
indicates that the system should record the locations of all entities
every 5 time steps and the run commands inform the system to simulate
a situation with 10 of each entity.  The result is a video which shows
plots of the locations of entities over time.

    new a 25;;

    define A.{@0,0,1}(
        send a ('ack').
	null
    );

    define B.{@0,0,2}(
        recv a (x).
	null
    );

    -step 5;
    -run A 10;
    -run B 10;


Running

Dependencies: Erlang, Python 3, matplotlib

    $ git clone https://www.github.com/rnagasam/BioScape-L.git
    $ cd BioScape-L
    $ ./bioscape example.bsp

Run `bioscape -h' to view all supported options.


References

[1] Compagnoni, Adriana et al. “A Calculus of Located Entities.”
Electronic Proceedings in Theoretical Computer Science 144 (2014):
41–56. Crossref. Web.